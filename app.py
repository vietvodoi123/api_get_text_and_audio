from fastapi import FastAPI, BackgroundTasks, HTTPException
from pydantic import BaseModel
import uuid
from tasks import process_task
from typing import Optional

app = FastAPI()

# B·ªô nh·ªõ l∆∞u tr·∫°ng th√°i c√°c task (in-memory, c√≥ th·ªÉ thay b·∫±ng database n·∫øu c·∫ßn)
tasks_store = {}


class CreateTaskRequest(BaseModel):
    story_id: str
    base_url: str  # V√≠ d·ª•: "https://truyenyy.xyz/truyen/thu-vien-khoa-hoc-ky-thuat-dich/chuong-{x}"
    css_selector_title: str  # V√≠ d·ª•: ".chap-title"
    css_selector_content: str  # V√≠ d·ª•: "#inner_chap_content_1"
    start_chap: int  # Ch∆∞∆°ng b·∫Øt ƒë·∫ßu (x)
    end_chap: int  # Ch∆∞∆°ng k·∫øt th√∫c (y)
    group_size: int
    webhook_url: Optional[str] = None  # üü¢ Webhook c√≥ th·ªÉ c√≥ ho·∫∑c kh√¥ng


@app.post("/create-task")
async def create_task(req: CreateTaskRequest, background_tasks: BackgroundTasks):
    # T√≠nh s·ªë nh√≥m: m·ªói nh√≥m 10 ch∆∞∆°ng
    chapters = list(range(req.start_chap, req.end_chap + 1))

    # Chia nh√≥m theo group_size
    grouped_chapters = [chapters[i:i + req.group_size] for i in range(0, len(chapters), req.group_size)]

    created_tasks = []
    # T·∫°o task cho m·ªói nh√≥m
    for start, end in grouped_chapters:
        task_id = str(uuid.uuid4())
        tasks_store[task_id] = {
            "status": "pending",
            "story_id":req.story_id,
            "audio_urls": [],
            "chapters": {"from": start, "to": end},
            "webhook_url": req.webhook_url,  # üü¢ L∆∞u webhook n·∫øu c√≥
        }
        # Th√™m x·ª≠ l√Ω task v√†o background task
        background_tasks.add_task(process_task, task_id, req, start, end, tasks_store)
        created_tasks.append({
            "task_id": task_id,
            "story_id":req.story_id,
            "chapters": {"from": start, "to": end},
            "status": "pending",
            "webhook_url": req.webhook_url

        })
    return created_tasks


@app.get("/task-status/{task_id}")
async def get_task_status(task_id: str):
    if task_id not in tasks_store:
        raise HTTPException(status_code=404, detail="Kh√¥ng t√¨m th·∫•y task")
    return tasks_store[task_id]


if __name__ == "__main__":
    import uvicorn

    uvicorn.run(app, host="0.0.0.0", port=8000)
